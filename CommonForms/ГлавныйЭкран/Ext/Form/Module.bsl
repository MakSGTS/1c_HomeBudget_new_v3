
&НаСервере
Перем ПараметрыПриложенияСервер Экспорт;

&НаКлиенте
Перем ПараметрыПриложенияКлиент Экспорт;

&НаСервере
Процедура ОбновитьНаСервере()
	РаботаСГлавнымЭкраномСервер.ОбновитьДанныеНаГлавномЭкране(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьНастроечныеИПредзапусковыеДействия()
	Если НЕ ЗначениеЗаполнено(Константы.ДатаПервогоЗапуска.Получить()) Тогда  //TODO: Переделать на другое условие, напр на проверку наличия узлов ПО. А так не правильно. Пользователь может регистрироваться не при первом запуске!!!
		НачатьТранзакцию();
		Попытка
			Константы.ДатаПервогоЗапуска.Установить(ТекущаяДата()); //TODO: перенести в параметры?
			Константы.ОтправлятьСтатистикуИЛоги.Установить(Истина); //TODO : удалить
			
			Узел = ПланыОбмена.Бэкап.СоздатьУзел();
			Узел.Код = "DataCentre";
			Узел.Наименование = "";
			Узел.Записать();
			
			Узел = ПланыОбмена.Бэкап.НайтиПоКоду(""); 
			УзелОб = Узел.ПолучитьОбъект();
			УзелОб.Наименование = "EX_" + Константы.user_id.Получить();  //TODO: переделать на параметры
			УзелОб.Код = "EX_" + Константы.user_id.Получить();            //TODO: переделать на параметры
			УзелОб.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЛогированиеОшибок.ЗаписатьОшибкуВЛоги(Ошибка,,, Перечисления.КритерииОшибок.Критическая);
		КонецПопытки;
	Иначе
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	ВыполнитьНастроечныеИПредзапусковыеДействия();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьНастройкиПоУмолчанию();
	ПриОткрытииНаСервере();
	ВыполнитАвтоБэкап();
	ПроверитьПериодическиеПлатежи();
	ОбновитьНаСервере(); 
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭкран() Экспорт
	ОбновитьНаСервере();
	ОбновитьОтображениеДанных();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитАвтоБэкап() Экспорт
	АвтоБэкап = ОбщиеПроцедурыИФункцииСервер.ПолучитьЗначениеКонстанты("АвтоБэкап");
	Если АвтоБэкап Тогда
		ВыгрузкаДанныхКлиент.АвтобэкапФон(ОбщиеПроцедурыИФункцииСервер.ПолучитьЗначениеКонстанты("ОблачныйБэкап"));
		НачатьОбработчикОжидания(ПредопределенноеЗначение("Перечисление.ПроверяемыеСобытияОбработчикаОжидания.Автобэкап"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПериодическиеПлатежи()
	СтруктураОтвета = ПроверитьПериодическиеПлатежиСервер();
	
	Если СтруктураОтвета.Ошибка Тогда
		ДиалогиСПользователямиКлиент.ОбработатьИнформациюОбОшибкеДляПользователя(СтруктураОтвета.ТекстОшибки, "Не удалось создать автоплатёж");
	КонецЕсли;
	
	МассивСсылок = СтруктураОтвета.МассивСсылок;
	Для Каждого ЭлСсылка Из МассивСсылок Цикл
		Если ЗначениеЗаполнено(ЭлСсылка) Тогда
			ПоказатьОповещениеПользователя("Выполнен автоплатёж",, ЭлСсылка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры                                                                                

&НаСервере
Функция ПроверитьПериодическиеПлатежиСервер()
	МассивСсылок = Новый Массив;
	СтруктураВозврата = Новый Структура("МассивСсылок, Ошибка, ТекстОшибки",, Ложь, "");
	СтруктураПараметров = Новый Структура("Дата, СтатьяРасхода, Количество, Цена, Сумма, СчетСписания, СчетНазначения, Автоплатеж");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АвтоПлатежиСрезПервых.Период КАК Дата,
	               |	АвтоПлатежиСрезПервых.СтатьяРасхода КАК СтатьяРасхода,
	               |	АвтоПлатежиСрезПервых.Количество КАК Количество,
	               |	АвтоПлатежиСрезПервых.Цена КАК Цена,
	               |	АвтоПлатежиСрезПервых.Сумма КАК Сумма,
	               |	АвтоПлатежиСрезПервых.спрРегистратор КАК спрРегистратор,
	               |	АвтоПлатежиСрезПервых.СчетСписания КАК СчетСписания,
	               |	АвтоПлатежиСрезПервых.СчетНазначения КАК СчетНазначения,
	               |	АвтоПлатежиСрезПервых.ТипПлатежа КАК ТипПлатежа,
	               |	ИСТИНА КАК Автоплатеж,
	               |	АвтоПлатежиСрезПервых.спрРегистратор.Наименование КАК Наименование
	               |ИЗ
	               |	РегистрСведений.АвтоПлатежи.СрезПоследних(&Период, НЕ Выполнен) КАК АвтоПлатежиСрезПервых
	               |ГДЕ
	               |	НЕ АвтоПлатежиСрезПервых.Выполнен";
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ВыборкаДетальныеЗаписи);
		ДокСсылка = ВыполнитьПериодическийПлатеж(СтруктураПараметров, ВыборкаДетальныеЗаписи.ТипПлатежа);
		
		МассивСсылок.Добавить(ВыборкаДетальныеЗаписи.Наименование);
		
		МенеджерЗаписи = РегистрыСведений.АвтоПлатежи.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
		МенеджерЗаписи.Период = ВыборкаДетальныеЗаписи.Дата;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Выполнен = Истина;
			МенеджерЗаписи.докРасход = ДокСсылка;
			
			Попытка
				МенеджерЗаписи.Записать(Истина);
			Исключение
				Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЛогированиеОшибок.ЗаписатьОшибкуВЛоги(Ошибка);
				СтруктураВозврата.Ошибка = Истина;
				СтруктураВозврата.ТекстОшибки = Ошибка;
				Возврат СтруктураВозврата;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураВозврата.МассивСсылок = МассивСсылок;
	Возврат СтруктураВозврата;
КонецФункции

&НаСервере
Функция ВыполнитьПериодическийПлатеж(СтруктураПараметров, ТипПлатежа)
	
	Если ТипПлатежа = Перечисления.ТипыПлатежей.ПереводМеждуСчетами Тогда
		Док = Документы.ПереводыМеждуСчетами.СоздатьДокумент();
		
		ЗаполнитьЗначенияСвойств(Док, СтруктураПараметров, "СчетСписания, СчетНазначения, ИсточникПоступления");
		Док.ИсточникПоступления = Справочники.ИсточникПоступлений.ПереводМеждуСчетами;
		
		Док.Записать(РежимЗаписиДокумента.Проведение);

	ИначеЕсли ТипПлатежа = Перечисления.ТипыПлатежей.Расход Тогда
		Док = Документы.Расходы.СоздатьДокумент();
		
		ЗаполнитьЗначенияСвойств(Док, СтруктураПараметров);
		
		ТЧ = Док.СписокСтатейРасходов.Добавить();
		ЗаполнитьЗначенияСвойств(ТЧ, СтруктураПараметров);
		
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЛогированиеОшибок.ЗаписатьОшибкуВЛоги(Ошибка);
			ДиалогиСПользователямиСервер.ПоказатьСообщениеПользователю(СтрШаблон("Не удалось создать автоплатёж %1", СтруктураПараметров.СтатьяРасхода));
			Док.Ссылка = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Док.Ссылка;
КонецФункции

&НаКлиенте
Процедура ГруппаСтраницПриСменеСтраницы(Элемент, ТекущаяСтраница)
	//ПараметрыПриложенияКлиент.Свойство("id_user", id_user);  //TODO: Разобраться для чего это. Вызывает ошибку, переменная ПараметрыПриложенияКлиент не определена по типу. Для чего планировалось исползовать
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВБуфер(Команда)
	КопироватьВБуферНаСервере();
	Окно = Элементы.Поле_HTML_Документа_acb123.Документ.ParentWindow;
	Окно.ClipboardData.SetData("Text", id_user);
	Элементы.Удалить(Элементы.Индекс(Элементы.Найти("Поле_HTML_Документа_acb123")));
КонецПроцедуры

&НаСервере
Процедура КопироватьВБуферНаСервере()
	Элементы.Добавить(Тип("ПолеHTMLДокумента"), "Поле_HTML_Документа_acb123", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	Форма = ПолучитьФорму("ОбщаяФорма.ФормаОбщихНастроек");
	Форма.Открыть();
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиПоУмолчанию()
	Если НЕ ЗначениеЗаполнено(Константы.ДатаПервогоЗапуска.Получить()) Тогда
		Справочники.ПараметрыСистемы.УстановитьНастройкиПоУмолчанию();
	КонецЕсли;
КонецПроцедуры
