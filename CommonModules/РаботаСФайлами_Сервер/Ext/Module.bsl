
#Область ПрограммныйИнтерфейс
// Упаоковать файл в архив.
// 
// Параметры:
//  ИмяФайла - Строка - Путь к файлу
//  Пароль   - Строка - Пароль
//  ПолучитьДвоичныеДанныеАрхива - Булево - Получить двоичные данные архива
// 
// Возвращаемое значение:
//  Строка - Путь к файлу архива, либо адрес временного хранилища, либо пустая строка, если возникла ошибка при работе с архивом
Функция УпаковатьФайлВАрхив(ИмяФайла, Пароль = "DnkfnmeioWdv243mk", ПолучитьДвоичныеДанныеАрхива = Ложь) Экспорт
	Возврат УпаковатьВАрхив(ИмяФайла, Пароль, ПолучитьДвоичныеДанныеАрхива);
КонецФункции

// Распаковать данные из архива.
// 
// Параметры:
//  Пароль 			   - Строка
//  ЭтоДвоичныеДанные  - Булево
//  ЭтоВХ 			   - Булево
//  ПоместитьВоВХ	   - Булево
//  ПутьИсходногоФайла - Строка - Файловый путь, либо адрес временного хранилища, если ЭтоВХ = ИСТИНА
//  ПутьКонечногоФайла - Строка - Путь конечного файла, по которому необходимо поместить распакованные данные
//  ТипФайла 		   - Строка - Тип файла внутри архива
//  Пароль             - Строка
// 
// Возвращаемое значение:
//  - Строка - Путь в котрый помещены распакованные данные, либо адрес временного хранилища
//
Функция РаспаковатьДанныеИзАрхива(ЭтоДвоичныеДанные, ЭтоВХ, ПоместитьВоВХ, ПутьИсходногоФайла, ПутьКонечногоФайла, Пароль = "DnkfnmeioWdv243mk") Экспорт
	Возврат РаспаковатьАрхив(Пароль, ЭтоДвоичныеДанные, ЭтоВХ, ПоместитьВоВХ, ПутьИсходногоФайла, ПутьКонечногоФайла);
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция УпаковатьВАрхив(ИмяФайла, Пароль, ПолучитьДвоичныеДанныеАрхива)
	
	МетодСжатия = МетодСжатияZIP.Сжатие;
	УровеньСжатия = УровеньСжатияZIP.Максимальный;
	МетодШифрования = МетодШифрованияZIP.AES256;
	//@skip-check missing-temporary-file-deletion
	ИмяФайлаАрхива = ПолучитьИмяВременногоФайла("zip"); 
	
	Попытка
		Если ПолучитьДвоичныеДанныеАрхива Тогда
			Архив = Новый ЗаписьZipФайла;
			Архив.Добавить(ИмяФайла);
			ДвоичныеДанные = Архив.ПолучитьДвоичныеДанные(Пароль, , МетодСжатия, УровеньСжатия, МетодШифрования);
			АдресВремХран = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			Возврат АдресВремХран;
		Иначе
			Архив = Новый ЗаписьZipФайла(ИмяФайлаАрхива, Пароль, , МетодСжатия, УровеньСжатия, МетодШифрования);
			Архив.Добавить(ИмяФайла);
			Архив.Записать();
			Возврат ИмяФайлаАрхива;
		КонецЕсли;
	Исключение
		ТекстОшибки = "Не удалось создать архив!." + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЛогированиеОшибокСервер.ЗаписатьОшибкуВЛоги(ТекстОшибки);
		Возврат "";
	КонецПопытки;
		
КонецФункции

Функция РаспаковатьАрхив(Пароль, ЭтоДвоичныеДанные, ЭтоВХ, ПоместитьВоВХ, ПутьИсходногоФайла, ПутьКонечногоФайла)
		Если ЭтоДвоичныеДанные Тогда
		//@skip-check missing-temporary-file-deletion
		ИмяФайла = ПолучитьИмяВременногоФайла("zip");
		Если ЭтоВХ Тогда
			ДвоичныеДанныеАрхива = ПолучитьИзВременногоХранилища(ПутьИсходногоФайла);
		Иначе
			ДвоичныеДанныеАрхива = Новый ДвоичныеДанные(ПутьИсходногоФайла);
		КонецЕсли;
		
		ДвоичныеДанныеАрхива.Записать(ИмяФайла);
	Иначе
		ИмяФайла = ПутьИсходногоФайла;
	КонецЕсли;
	
	Архив = Новый ЧтениеZipФайла(ИмяФайла, Пароль);
	Файлы = Архив.Элементы;
	ИмяФайла = Файлы[0].Имя;
	Архив.ИзвлечьВсе(ПутьКонечногоФайла);
	Архив.Закрыть();
	
	Если ПоместитьВоВХ Тогда 
		ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКонечногоФайла + ИмяФайла);
		ПутьРаспаковки = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		Попытка
			УдалитьФайлы(ПутьКонечногоФайла + ИмяФайла);
		Исключение
			Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЛогированиеОшибокСервер.ЗаписатьОшибкуВЛоги("Не удалось удалить файл." + Символы.ПС + Ошибка);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ПутьРаспаковки;
	
КонецФункции

#КонецОбласти
