
Процедура ЗагрузитьДанные(Путь, ТолькоСправочники) Экспорт 
	
	Попытка
		
		ПутьXML = ПолучитьИмяВременногоФайла("xml");
		
		ФайлТХТ = Новый ЧтениеТекста;
		ФайлТХТ.Открыть(Путь);
		
		ДанныеСтрока = ФайлТХТ.Прочитать();
		Если НЕ ЗначениеЗаполнено(ДанныеСтрока) Тогда
			Ошибка = "Не удалось восстановить данные!";
			ОбщиеПроцедурыИФункцииСервер.ЗаписатьЛоги(Ошибка + " Модуль ЗагрузкаДанныхСервер, Процедура ЗагрузитьДанные(), Причина: ФайлТХТ.Прочитать() = Неопределено.");
			ДиалогиСПользователямиСервер.ПоказатьСообщениеПользователю(Ошибка);
			Возврат;
		КонецЕсли;
		
		ДанныеСтрока = СокрЛП(ДанныеСтрока);
		ДанныеСтрока = СтрЗаменить(ДанныеСтрока, " ", "");
		ДанныеСтрока = СтрЗаменить(ДанныеСтрока, Символы.НПП, "");
		
		ХЗ = XMLЗначение(Тип("ХранилищеЗначения"), ДанныеСтрока);
		ДвоичныеДанные = ХЗ.Получить();
		ДвоичныеДанные.Записать(ПутьXML);
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ПутьXML);
		
		ДатаБазы = "";
		ВерсияБазы = "";
		user_id = "";
		ПараметрыСчитаны = Ложь;
		
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "dateUpLoad" Тогда
				ЧтениеXML.Прочитать();
				ДатаБазы = ЧтениеXML.Значение;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "version" Тогда
				ЧтениеXML.Прочитать();
				ВерсияБазы = ЧтениеXML.Значение;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "user_id" Тогда
				ЧтениеXML.Прочитать();
				user_id = ЧтениеXML.Значение;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "onlyHandbooks" Тогда
				ЧтениеXML.Прочитать();
				ТолькоСправочники = XMLЗначение(Тип("Булево"), ЧтениеXML.Значение);
				ПараметрыСчитаны = Истина;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДатаБазы) И ЗначениеЗаполнено(ВерсияБазы) И ЗначениеЗаполнено(user_id) И ПараметрыСчитаны Тогда
				ЧтениеXML.Закрыть();
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если user_id <> Константы.user_id.Получить() Тогда
			Константы.user_id.Установить(user_id);
		КонецЕсли;
		
		ЧтениеXML.ОткрытьФайл(ПутьXML);
		НоваяЗагрузка_XML(ЧтениеXML, ПутьXML, ТолькоСправочники);
		
		Сообщение = Новый СообщениеПользователю;
		Текст = СтрШаблон("База данных успешно згружена! Данные актуализированны на %1", ДатаБазы);
		Сообщение.Текст = Текст;
		Сообщение.Сообщить();
		
	Исключение
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщиеПроцедурыИФункцииСервер.ЗаписатьЛоги(Ошибка);
		ДиалогиСПользователямиСервер.ПоказатьСообщениеПользователю(Ошибка);
	КонецПопытки;

КонецПроцедуры

//Новый вариант
Процедура НоваяЗагрузка_XML(ЧтениеXML, Путь, ТолькоСправочники) Экспорт
	
	Пока ЧтениеXML.Прочитать() Цикл
		Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
			Объект = ПрочитатьXML(ЧтениеXML);
			//Объект.ОбменДанными.Загрузка = Истина;
			Объект.ДополнительныеСвойства.Вставить("ЗагрузкаДанных", Истина);
			Если СтрНайти(Объект.Метаданные().ПолноеИмя(), "Справочник") > 0 Тогда
				Если Объект.Предопределенный Тогда
					ОбъектКопия = Объект;
					СпрСс = Справочники[Объект.Метаданные().Имя].НайтиПоКоду(ОбъектКопия.Код);
					Если ЗначениеЗаполнено(СпрСс) Тогда 
						ОбъектСт = СпрСс.ПолучитьОбъект();
												
						Если Объект.Метаданные().ТипКода = Метаданные.СвойстваОбъектов.ТипКодаСправочника.Число Тогда
							ТипПриведения = Тип("Число");
						Иначе
							ТипПриведения = Тип("Строка");
						КонецЕсли;
						guid = ПолучитьGUID(Путь, ЧтениеXML.Имя, Объект.Код, ТипПриведения);
						
						Объект = Справочники[Объект.Метаданные().Имя].СоздатьЭлемент();
						ЗаполнитьЗначенияСвойств(Объект, ОбъектСт,, ПолучитьПропускаемыРеквизиты(СпрСс));
						Объект.ИмяПредопределенныхДанных = ОбъектКопия.ИмяПредопределенныхДанных;
						Объект.УстановитьСсылкуНового(ПолучитьСсылкуСпр(Объект, Новый УникальныйИдентификатор(guid)));
						
						ОбъектСт.Удалить();
						
						Объект.Записать();
					КонецЕсли;
				Иначе
					Объект.Записать();
				КонецЕсли;
			ИначеЕсли СтрНайти(Объект.Метаданные().ПолноеИмя(), "Документ") > 0 И НЕ ТолькоСправочники Тогда
				Если Объект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
					Объект.Записать(РежимЗаписиДокумента.Проведение);
				Иначе					
					Объект.Записать(РежимЗаписиДокумента.Запись);
					
				КонецЕсли;
			ИначеЕсли СтрНайти(Объект.Метаданные().ПолноеИмя(), "Регистр") > 0 И НЕ ТолькоСправочники Тогда
				Объект.Записать();
			ИначеЕсли СтрНайти(Объект.Метаданные().ПолноеИмя(), "Константа") > 0 И НЕ ТолькоСправочники Тогда
				Объект.Записать();
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	
	//ПровестиДокументыНепроведенные
	
КонецПроцедуры

Функция ПолучитьПропускаемыРеквизиты(СпрСсылка)
	
	ПропускаемыеРеквизиты = "";
	
	Если НЕ СпрСсылка.Метаданные().Иерархический Тогда
		ПропускаемыеРеквизиты = ПропускаемыеРеквизиты + ?(ЗначениеЗаполнено(ПропускаемыеРеквизиты), ", ", "") + "Родитель";
	КонецЕсли;
	
	Если СпрСсылка.Метаданные().Владельцы.Количество() = 0 Тогда
		ПропускаемыеРеквизиты = ПропускаемыеРеквизиты + ?(ЗначениеЗаполнено(ПропускаемыеРеквизиты), ", ", "") + "Владелец";
	КонецЕсли;
	
	Если СпрСсылка.Метаданные().ПолучитьИменаПредопределенных().Количество() = 0 Тогда
		ПропускаемыеРеквизиты = ПропускаемыеРеквизиты + ?(ЗначениеЗаполнено(ПропускаемыеРеквизиты), ", ", "") + "ИмяПредопределенныхДанных";
	КонецЕсли;
	
	Возврат ПропускаемыеРеквизиты;
	
КонецФункции

Функция ПолучитьСсылкуСпр(ОбъектСпр, guid)
	Возврат Справочники[ОбъектСпр.Метаданные().Имя].ПолучитьСсылку(guid);
КонецФункции

Функция ПолучитьGUID(Путь, ИмяСправочника, КодЭлемента, ТипПриведения)
	ЧтХ = Новый ЧтениеXML;
	ЧтХ.ОткрытьФайл(Путь);// + "1cDB_new.xml");
	Пока ЧтХ.Прочитать() Цикл
		Если ЧтХ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтХ.Имя = ИмяСправочника Тогда
			Пока ЧтХ.Прочитать() Цикл 
				Если ЧтХ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтХ.Имя = "Ref" Тогда
					ЧтХ.Прочитать();
					guid = ЧтХ.Значение;                           
					Продолжить;
				ИначеЕсли ЧтХ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтХ.Имя = "Code" Тогда
					ЧтХ.Прочитать();
					Код = XMLЗначение(ТипПриведения, ЧтХ.Значение);
					Если Код = КодЭлемента Тогда
						Возврат guid;
						ЧтХ.Закрыть();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ЧтХ.Закрыть();
КонецФункции

//Старая загрузка
Процедура ЗагрузитьДанные_СтарыйВариант(Путь, ТолькоСправочники) Экспорт 
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		
		ЧтениеXML.ОткрытьФайл(Путь);
		
		ДатаБазы = "";
		ВерсияБазы = "";
		user_id = "";
		ПараметрыСчитаны = Ложь;
		
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "dateUpLoad" Тогда
				ЧтениеXML.Прочитать();
				ДатаБазы = ЧтениеXML.Значение;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "version" Тогда
				ЧтениеXML.Прочитать();
				ВерсияБазы = ЧтениеXML.Значение;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "user_id" Тогда
				ЧтениеXML.Прочитать();
				user_id = ЧтениеXML.Значение;
			ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "onlyHandbooks" Тогда
				ЧтениеXML.Прочитать();
				ТолькоСправочники = XMLЗначение(Тип("Булево"), ЧтениеXML.Значение);
				ПараметрыСчитаны = Истина;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДатаБазы) И ЗначениеЗаполнено(ВерсияБазы) И ЗначениеЗаполнено(user_id) И ПараметрыСчитаны Тогда
				ЧтениеXML.Закрыть();
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если user_id <> Константы.user_id.Получить() Тогда
			Константы.user_id.Установить(user_id);
		КонецЕсли;
		
		МетаданныеСправочники = Метаданные.Справочники;     
		Для Каждого Справочник Из МетаданныеСправочники Цикл 
			ЧтениеXML.ОткрытьФайл(Путь);
			Загрузить(ЧтениеXML, Справочник.ПолноеИмя(), "Справочники." + Справочник.Имя, "Справочники", "handbooks", "handbook", Справочник.Имя);
			ЧтениеXML.Закрыть();
		КонецЦикла; 
		
		Если Не ТолькоСправочники Тогда
			
			МетаданныеДокументы = Метаданные.Документы;     
			Для Каждого Документ Из МетаданныеДокументы Цикл 
				ЧтениеXML.ОткрытьФайл(Путь);
				Загрузить(ЧтениеXML, Документ.ПолноеИмя(), "Документы." + Документ.Имя, "Документы", "documents", "document", Документ.Имя);
				ЧтениеXML.Закрыть();
			КонецЦикла;
			
			МетаданныеРегистрыСведений = Метаданные.РегистрыСведений;  //TODO: Отбор только неподчинённым регистрам!!   
			Для Каждого Регистр Из МетаданныеРегистрыСведений Цикл
				Если Регистр.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
					ЧтениеXML.ОткрытьФайл(Путь);
					Загрузить(ЧтениеXML, Регистр.ПолноеИмя(), "Регистры." + Регистр.Имя, "Регистры", "registers", "register", Регистр.Имя);
					ЧтениеXML.Закрыть();
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Текст = СтрШаблон("База данных успешно згружена! Данные актуализированны на %1", ДатаБазы);
		Сообщение.Текст = Текст;
		Сообщение.Сообщить();
		
	Исключение
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщиеПроцедурыИФункцииСервер.ЗаписатьЛоги(Ошибка);
		Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

КонецПроцедуры

Процедура Загрузить(ЧтениеXML, ОбъектВыгрузки, ИмяОбъектаДанных, ИД_Объекта, ТэгОбъекта, ТэгЭлемента, ИмяЭлемента)
	МассивДанных = Новый Массив;
	Если ИД_Объекта <> "Регистры" Тогда 
		МассивКодов = ПроверкаНаличияЭлементаВБазе(ОбъектВыгрузки, ИД_Объекта);
	Иначе 
		МассивКодов = Неопределено;
	КонецЕсли;
	Закончить = Ложь;
	
	Пока ЧтениеXML.Прочитать() Цикл
		Пропустить = Ложь;
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = ТэгОбъекта Тогда
			Пока ЧтениеXML.Прочитать() Цикл       
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = ТэгЭлемента Тогда
					Если ОбъектВыгрузки = ЧтениеXML.ЗначениеАтрибута("type_Object") Тогда 
						Пока ЧтениеXML.Прочитать() Цикл  // Ошибка при чтении документ Чек!!!?
							Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "valueTable" Тогда
								
								ДанныеСтрока = ЧтениеXML.ЗначениеАтрибута("data");
								ДанныеСтрока = СтрЗаменить(ДанныеСтрока, Символы.НПП, "");
								ДанныеСтрока = СтрЗаменить(ДанныеСтрока, Символы.ПС, "");
								ДанныеСтрока = СтрЗаменить(ДанныеСтрока, Символы.ВТаб, "");
								ДанныеСтрока = СтрЗаменить(ДанныеСтрока, Символы.Таб, "");
								ДанныеСтрока = СтрЗаменить(ДанныеСтрока, " ", "");
								
							ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "valueTable" Тогда
								Закончить = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если Закончить Тогда 
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Закончить Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеТЗ = ПреобразоватьСтрокуВДанные(ДанныеСтрока);
	//МассивКодов = ПроверкаНаличияЭлементаВБазе(ИмяСправочника
	ОбработатьТаблицуЗначений(ДанныеТЗ, ИмяОбъектаДанных, ИД_Объекта, ИмяЭлемента, МассивКодов);
		
КонецПроцедуры

Функция ПреобразоватьСтрокуВДанные(ДанныеСтрока)
	Хранилище = XMLЗначение(Тип("ХранилищеЗначения"), ДанныеСтрока);
	Возврат Хранилище.Получить();
КонецФункции

Процедура ОбработатьТаблицуЗначений(Таблица, ИмяОбъектаМетаданных, ИмяОбъекта, ИмяЭлемента, МассивКодовДляПропуска)
	ТекстКоманды = "Загрузить" + ИмяОбъекта + "_" + ИмяЭлемента + "(Таблица, МассивКодовДляПропуска)";
	Выполнить(ТекстКоманды); 
КонецПроцедуры

Функция ПолучитьСсылку(ИмяСправочникаДокумента, КодЭлемента, ЭтоДокумент = Ложь)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СпрОбъект.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.СтатьиРасходов КАК СпрОбъект
	               |ГДЕ
	               |	СпрОбъект.Код = &КодЭлемента";
	
	Если ЭтоДокумент Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.СтатьиРасходов КАК СпрОбъект", "Документ." + ИмяСправочникаДокумента + " КАК СпрОбъект");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СпрОбъект.Код = &КодЭлемента", "СпрОбъект.Номер = &КодЭлемента");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.СтатьиРасходов КАК СпрОбъект", "Справочник." + ИмяСправочникаДокумента + " КАК СпрОбъект");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КодЭлемента", КодЭлемента);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
	//ИмяМетаданных = ?(ЭтоДокумент, "Документы", "Справочники");
	
	Возврат ВыборкаДетальныеЗаписи.Ссылка;// ?(ВыборкаДетальныеЗаписи.Ссылка = Неопределено, Справочники[Метаданные.Справочники[ИмяСправочникаДокумента].Имя].ПустаяСсылка(), ВыборкаДетальныеЗаписи.Ссылка);
КонецФункции

Функция ПроверкаНаличияЭлементаВБазе(ОбъектПроверки, ТипОбъекта)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Объект.Номер КАК НомерКод
	               |ИЗ
	               |	Документ.Расходы КАК Объект";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.Расходы", ОбъектПроверки);
	Если ТипОбъекта = "Справочники" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Объект.Номер", "Объект.Код");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если НЕ РезультатЗапроса.Пустой() Тогда
		МассивКодов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("НомерКод");
	Иначе
		МассивКодов = Новый Массив();
	КонецЕсли;
	
	Возврат МассивКодов;
КонецФункции

//Справочники
Процедура ЗагрузитьСправочники_Магазины(Таблица, МассивКодовДляПропуска)
	Для Каждого Элемент Из Таблица Цикл
		
		Если МассивКодовДляПропуска.Найти(Элемент.Код) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		НовыйЭлемент = Справочники.Магазины.СоздатьЭлемент();
		НовыйЭлемент.Код = Элемент.Код;
		НовыйЭлемент.Наименование = Элемент.Наименование;
		НовыйЭлемент.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьСправочники_ЕденицыИзмерения(Таблица, МассивКодовДляПропуска)
	Для Каждого Элемент Из Таблица Цикл 
		Если МассивКодовДляПропуска.Найти(Элемент.Код) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		НовыйЭлемент = Справочники.ЕденицыИзмерения.СоздатьЭлемент();
		НовыйЭлемент.Код = Элемент.Код;
		НовыйЭлемент.Наименование = Элемент.Наименование;
		НовыйЭлемент.Записать();
	КонецЦикла;	
КонецПроцедуры

Процедура ЗагрузитьСправочники_ВидСчета(Таблица, МассивКодовДляПропуска)
	//Для Каждого Элемент Из Таблица Цикл
	//	Если МассивКодовДляПропуска.Найти(Элемент.Код) <> Неопределено Тогда 
	//		Продолжить;
	//	КонецЕсли;
	//	НовыйЭлемент = Справочники.ВидСчета.СоздатьЭлемент();
	//	НовыйЭлемент.Код = Элемент.Код;
	//	НовыйЭлемент.Наименование = Элемент.Наименование;
	//	НовыйЭлемент.Записать();
	//КонецЦикла;
	
	Возврат;
КонецПроцедуры

Процедура ЗагрузитьСправочники_Счета(Таблица, МассивКодовДляПропуска)
	Для Каждого Элемент Из Таблица Цикл 
		Если МассивКодовДляПропуска.Найти(Элемент.Код) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		НовыйЭлемент = Справочники.Счета.СоздатьЭлемент();
		НовыйЭлемент.Код = Элемент.Код;
		НовыйЭлемент.Наименование = Элемент.Наименование;
		НовыйЭлемент.ВидСчета = Элемент.ВидСчета;
		НовыйЭлемент.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьСправочники_СтатьиРасходов(Таблица, МассивКодовДляПропуска)
	Таблица.Сортировать("ЭтоГруппа УБЫВ, РодительКод, Код");
	
	Для Каждого Элемент Из Таблица Цикл
		Если МассивКодовДляПропуска.Найти(Элемент.Код) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Элемент.ЭтоГруппа Тогда 
			
			ГруппаСправочника = Справочники.СтатьиРасходов.СоздатьГруппу();
			ГруппаСправочника.Код = Элемент.Код;
			ГруппаСправочника.Наименование = Элемент.Наименование;
			ГруппаСправочника.Родитель = ПолучитьСсылку("СтатьиРасходов", Элемент.РодительКод);
			
			ГруппаСправочника.Записать();
		Иначе 
			ЭлементСправочника = Справочники.СтатьиРасходов.СоздатьЭлемент(); 
			
			ЭлементСправочника.Родитель = ПолучитьСсылку("СтатьиРасходов", Элемент.РодительКод);
			ЭлементСправочника.Код = Элемент.Код;
			ЭлементСправочника.Наименование = Элемент.Наименование;
			ЭлементСправочника.КатегорияРасхода = Элемент.КатегорияРасхода;
			ЭлементСправочника.НеРегулярныйПлатеж = Элемент.НеРегулярныйПлатеж;
			ЭлементСправочника.ВесовойТовар = Элемент.ВесовойТовар; 
			ЭлементСправочника.ВесОбъем = Число(Элемент.ВесОбъем); 
			ЭлементСправочника.ЕдИзмерения = ПолучитьСсылку("ЕденицыИзмерения", Элемент.РодительКод);
			
			ЭлементСправочника.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьСправочники_ИсточникПоступлений(Таблица, МассивКодовДляПропуска)
	Для Каждого Элемент Из Таблица Цикл
		Если МассивКодовДляПропуска.Найти(Элемент.Код) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		НовыйЭлемент = Справочники.ИсточникПоступлений.СоздатьЭлемент();
		НовыйЭлемент.Код = Элемент.Код;
		НовыйЭлемент.Наименование = Элемент.Наименование;
		НовыйЭлемент.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьСправочники_Контрагенты(Таблица, МассивКодовДляПропуска)
	Для Каждого Элемент Из Таблица Цикл
		Если МассивКодовДляПропуска.Найти(Элемент.Код) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйЭлемент.Код = Элемент.Код;
		НовыйЭлемент.Наименование = Элемент.Наименование;
		НовыйЭлемент.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьСправочники_ПериодическиеПлатежи(Таблица, МассивКодовДляПропуска)
	Для Каждого Элемент Из Таблица Цикл 
		Если МассивКодовДляПропуска.Найти(Элемент.Код) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		НовыйЭлемент = Справочники.ЕденицыИзмерения.СоздатьЭлемент();
		НовыйЭлемент.Код = Элемент.Код;
		НовыйЭлемент.Наименование = Элемент.Наименование;
		НовыйЭлемент.СтатьяРасхода = ПолучитьСсылку("СтатьяРасхода", Элемент.СтатьяРасходаКод);
		НовыйЭлемент.Периодичность = Элемент.Периодичность;
		НовыйЭлемент.ЧислоМесяца = Элемент.ЧислоМесяца;
		НовыйЭлемент.ДатаПервогоПлатежа = Элемент.ДатаПервогоПлатежа;
		НовыйЭлемент.Записать();
	КонецЦикла;	
КонецПроцедуры

Процедура ЗагрузитьСправочники_Валюты(Таблица, МассивКодовДляПропуска)
	Для Каждого Элемент Из Таблица Цикл 
		Если МассивКодовДляПропуска.Найти(Элемент.Код) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		НовыйЭлемент = Справочники.Счета.СоздатьЭлемент();
		НовыйЭлемент.Код = Элемент.Код;
		НовыйЭлемент.Наименование = Элемент.Наименование;
		НовыйЭлемент.КраткоеОбозначение = Элемент.КраткоеОбозначение;
		НовыйЭлемент.Записать();
	КонецЦикла;
КонецПроцедуры

//Документы
Процедура ЗагрузитьДокументы_Приход(Таблица, МассивКодовДляПропуска)
	Для Каждого Документ Из Таблица Цикл
		Если МассивКодовДляПропуска.Найти(Документ.Номер) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		СчетПоступления = ПолучитьСсылку("Счета", Документ.СчетПоступленияКод);
		Источник = ПолучитьСсылку("ИсточникПоступлений", Документ.ИсточникКод);
		
		ОбъектДокумент = Документы.Приход.СоздатьДокумент();
		
		ОбъектДокумент.Дата = Дата(Документ.Дата);
		ОбъектДокумент.Номер = Документ.Номер;
		ОбъектДокумент.Источник = Источник;
		ОбъектДокумент.СчетПоступления = СчетПоступления;
		ОбъектДокумент.Сумма = Число(Документ.Сумма);
		ОбъектДокумент.Комментарий = Документ.Комментарий;
		
		ОбъектДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьДокументы_Расходы(Таблица, МассивКодовДляПропуска)
	
	Для Каждого Документ Из Таблица Цикл
		Если МассивКодовДляПропуска.Найти(Документ.Номер) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		 
		СтатьяРасхода = ПолучитьСсылку("СтатьиРасходов", Документ.РасходКод);
		СчетСписания = ПолучитьСсылку("Счета", Документ.СчетСписанияКод);
		Если Документ.МагазинКод <> Null Тогда
			Магазин = ПолучитьСсылку("Магазины", Документ.МагазинКод);
		Иначе
			Магазин = Справочники.Магазины.ПустаяСсылка();
		КонецЕсли;
		
		ОбъектДокумент = Документы.Расходы.СоздатьДокумент();
		
		ОбъектДокумент.Дата = Дата(Документ.Дата);
		ОбъектДокумент.Номер = Документ.Номер;
		ОбъектДокумент.СтатьяРасхода = СтатьяРасхода;
		ОбъектДокумент.Количество = Документ.Количество;
		ОбъектДокумент.Цена = Документ.Цена;
		ОбъектДокумент.Скидка = Документ.Скидка;
		ОбъектДокумент.Сумма = Документ.Сумма;
		ОбъектДокумент.СуммаПоДокументу = Документ.СуммаПоДокументу;
		ОбъектДокумент.СчетСписания = СчетСписания;
		ОбъектДокумент.Магазин = Магазин;
		
		Для Каждого Строка Из Документ.СписокСтатейРасходов Цикл
			НоваяСтрока = ОбъектДокумент.СписокСтатейРасходов.Добавить();
			НоваяСтрока.СтатьяРасхода = ПолучитьСсылку("СтатьиРасходов", Строка.ТоварКод);
			НоваяСтрока.Цена = Строка.Цена;
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.Штрихкод = Строка.Штрихкод;			
		КонецЦикла;
		
		ОбъектДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьДокументы_ЗапланированныеПокупки(Таблица, МассивКодовДляПропуска)
	Для Каждого Документ Из Таблица Цикл 
		Если МассивКодовДляПропуска.Найти(Документ.Номер) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбъектДокумент = Документы.ЗапланированныеПокупки.СоздатьДокумент();
		
		ОбъектДокумент.Дата = Дата(Документ.Дата);
		ОбъектДокумент.Номер = Документ.Номер;
		ОбъектДокумент.ВсеВыполнено = ?(Документ.ВсеВыполнено = "Истина", Истина, Ложь);
		ОбъектДокумент.Итого = Число(Документ.Итого);
		ОбъектДокумент.Комментарий = Документ.Комментарий;
		
		Для Каждого Строка Из Документ.Товары Цикл
			НоваяСтрока = ОбъектДокумент.Товары.Добавить();
			НоваяСтрока.СтатьяРасхода = ПолучитьСсылку("СтатьиРасходов", Строка.ТоварКод);
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.Выполнено = ?(Строка.Выполнено = "Истина", Истина, Ложь);
		КонецЦикла;
		ОбъектДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьДокументы_НеВыполненныеПокупки(Таблица, МассивКодовДляПропуска)
	Для Каждого Документ Из Таблица Цикл 		
		Если МассивКодовДляПропуска.Найти(Документ.Номер) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбъектДокумент = Документы.НеВыполненныеПокупки.СоздатьДокумент();
		
		ОбъектДокумент.Дата = Дата(Документ.Дата);
		ОбъектДокумент.Номер = Документ.Номер;
		ОбъектДокумент.Итого = Число(Документ.Итого);
		
		Для Каждого Строка Из Документ.Товары Цикл
			НоваяСтрока = ОбъектДокумент.Товары.Добавить();
			НоваяСтрока.СтатьяРасхода = ПолучитьСсылку("СтатьиРасходов", Строка.ТоварКод);
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.Сумма = Строка.Сумма;
			НоваяСтрока.Выполнено = ?(Строка.Выполнено = "Истина", Истина, Ложь);
			НоваяСтрока.ДокументИсточник = Документы.ЗапланированныеПокупки.НайтиПоНомеру(Строка.ДокументИсточникНомер);
			НоваяСтрока.ЕденицаИзмерения = ПолучитьСсылку("ЕденицыИзмерения", Строка.ЕденицаИзмеренияКод);
		КонецЦикла;
		ОбъектДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьДокументы_МесячныйБюджет(Таблица, МассивКодовДляПропуска)
	Для Каждого Документ Из Таблица Цикл
		Если МассивКодовДляПропуска.Найти(Документ.Номер) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбъектДокумент = Документы.МесячныйБюджет.СоздатьДокумент();
		
		ОбъектДокумент.Дата = Дата(Документ.Дата);
		ОбъектДокумент.Номер = Документ.Номер;
		ОбъектДокумент.НачалоПериода = Дата(Документ.НачалоПериода);
		ОбъектДокумент.ОкончаниеПериода = Дата(Документ.ОкончаниеПериода);
		ОбъектДокумент.СуммаПлан = Число(Документ.СуммаПлан);
		ОбъектДокумент.СуммаФакт = Число(Документ.СуммаФакт);
		ОбъектДокумент.ПериодСтрока = Документ.ПериодСтрока;
		ОбъектДокумент.ПериодПоследнегоАнализа = Дата(Документ.ПериодПоследнегоАнализа);
		ОбъектДокумент.ПоказыватьСпискомБюджет = Документ.ПоказыватьСпискомБюджет;
		ОбъектДокумент.КраткийАнализ = Документ.КраткийАнализ;
		
		Для Каждого Строка Из Документ.СтатьиРасходов Цикл
			НоваяСтрока = ОбъектДокумент.СтатьиРасходов.Добавить();
			НоваяСтрока.СтатьяРасхода = ПолучитьСсылку("СтатьиРасходов", Строка.РасходКод);
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.Сумма = Строка.Сумма;
		КонецЦикла;
		ОбъектДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьДокументы_КассовыйЧек(Таблица, МассивКодовДляПропуска)
	Для Каждого Документ Из Таблица Цикл 
		Если МассивКодовДляПропуска.Найти(Документ.Номер) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Документ.МагазинВБазеКод) Тогда
			Магазин = ПолучитьСсылку("Магазины", Документ.МагазинВБазеКод);
		Иначе
			Магазин = Справочники.Магазины.ПустаяСсылка();
		КонецЕсли;
		
		ОбъектДокумент = Документы.КассовыйЧек.СоздатьДокумент();
		
		ОбъектДокумент.Дата = Дата(Документ.Дата);
		ОбъектДокумент.Номер = Документ.Номер;
		ОбъектДокумент.ИтогоПоДокументу = Документ.ИтогоПоДокументу;
		ОбъектДокумент.НаименованиеМагазина = Документ.НаименованиеМагазина;
		ОбъектДокумент.МагазинВБазе = Магазин;
		ОбъектДокумент.ИНН = Документ.ИНН;
		ОбъектДокумент.Смена = Документ.Смена;
		ОбъектДокумент.Кассир = Документ.Кассир;
		ОбъектДокумент.ВидДвижения = Документ.ВидДвижения;
		ОбъектДокумент.Наличные = Документ.Наличные;
		ОбъектДокумент.Карта = Документ.Карта;
		ОбъектДокумент.НДС10 = Документ.НДС10;
		ОбъектДокумент.НДС20 = Документ.НДС20;
		ОбъектДокумент.РегНомерККТ = Документ.РегНомерККТ;
		ОбъектДокумент.ФН = Документ.ФН;
		ОбъектДокумент.ФД = Документ.ФД;
		ОбъектДокумент.ФПД = Документ.ФПД;
		ОбъектДокумент.НомерФискальногоАппарата = Документ.НомерФискальногоАппарата;
		ОбъектДокумент.ДокументРасход = ПолучитьСсылку("Расходы", Документ.ДокументРасходНомер, Истина);
		ОбъектДокумент.НомерКассы = Документ.НомерКассы;
		ОбъектДокумент.АдресМагазина = Документ.АдресМагазина;
		ОбъектДокумент.ИдДокумента = Документ.ИдДокумента;
		ОбъектДокумент.QRCode = Документ.QRCode;
		ОбъектДокумент.КартинкаQRcode = Документ.КартинкаQRcode;
		
		Для Каждого Строка Из Документ.СписокСтатейРасходов Цикл
			НоваяСтрока = ОбъектДокумент.СписокСтатейРасходов.Добавить();
			НоваяСтрока.СтатьяРасхода = ПолучитьСсылку("СтатьиРасходов", Строка.СтатьяРасходаКод);
			НоваяСтрока.Наименование = Строка.Наименование;
			НоваяСтрока.Цена = Строка.Цена;
			НоваяСтрока.Количество = Строка.Количество;
			НоваяСтрока.Сумма = Строка.Сумма;
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьДокументы_Займ(Таблица, МассивКодовДляПропуска)
	Для Каждого Документ Из Таблица Цикл 
		Если МассивКодовДляПропуска.Найти(Документ.Номер) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьДокументы_КорректировкаОстатков(Таблица, МассивКодовДляПропуска)
	СтарыйНомерДокумента = "";
	ОбъектДокумент = Неопределено;
	НомерСтроки = 0;
	Для Каждого Документ Из Таблица Цикл
		НомерСтроки = НомерСтроки + 1;
		
		Если НЕ ЗначениеЗаполнено(Документ.Дата) Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивКодовДляПропуска.Найти(Документ.Номер) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекущийНомерДокумента = Документ.Номер;
		
		Если ТекущийНомерДокумента <> СтарыйНомерДокумента ИЛИ НомерСтроки = Таблица.Количество() Тогда
			
			Если ОбъектДокумент <> Неопределено ИЛИ НомерСтроки = Таблица.Количество() Тогда
				ОбъектДокумент.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			ОбъектДокумент = Документы.КорректировкаОстатков.СоздатьДокумент();
			ОбъектДокумент.Номер = ТекущийНомерДокумента;
			ОбъектДокумент.Дата = Документ.Дата;
		Иначе
			Если НЕ ЗначениеЗаполнено(Документ.Период) Тогда
				СтарыйНомерДокумента = Документ.Номер;
				Продолжить;
			КонецЕсли;
			
			Счет = ПолучитьСсылку("Счета", Документ.СчетКод);
			ИсточникПоступления = ПолучитьСсылку("ИсточникПоступлений", Документ.ИсточникПоступленияКод);
			
			ОбъектДокумент.Движения.ОстаткиДенежныхСредств.Записывать = Истина;
			Движение = ОбъектДокумент.Движения.ОстаткиДенежныхСредств.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Документ);
			Движение.Счет = Счет;
			Движение.ИсточникПоступления = ИсточникПоступления;
			
		КонецЕсли;
				
		СтарыйНомерДокумента = Документ.Номер;
		
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьДокументы_ПереводыМеждуСчетами(Таблица, МассивКодовДляПропуска)
	Для Каждого Документ Из Таблица Цикл 
		Если МассивКодовДляПропуска.Найти(Документ.Номер) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		СчетСписания = ПолучитьСсылку("Счета", Документ.СчетСписанияКод);
		СчетНазначения = ПолучитьСсылку("Счета", Документ.СчетНазначенияКод);
		ИсточникПоступления = ПолучитьСсылку("ИсточникПоступлений", Документ.ИсточникПоступленияКод);
		
		ОбъектДокумент = Документы.ПереводыМеждуСчетами.СоздатьДокумент();
		
		ОбъектДокумент.Дата = Дата(Документ.Дата);
		ОбъектДокумент.Номер = Документ.Номер;
		ОбъектДокумент.СчетСписания = СчетСписания;
		ОбъектДокумент.СчетНазначения = СчетНазначения;
		ОбъектДокумент.ИсточникПоступления = ИсточникПоступления;
		ОбъектДокумент.Сумма = Число(Документ.Сумма);
		
		ОбъектДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьДокументы_ВводНачальныхОстатков(Таблица, МассивКодовДляПропуска)
	Для Каждого Документ Из Таблица Цикл 
		Если МассивКодовДляПропуска.Найти(Документ.Номер) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Счет = ПолучитьСсылку("Счета", Документ.СчетКод);
		ИсточникПоступления = ПолучитьСсылку("ИсточникПоступлений", Документ.ИсточникПоступленияКод);
		
		ОбъектДокумент = Документы.ВводНачальныхОстатков.СоздатьДокумент();
		
		ОбъектДокумент.Дата = Дата(Документ.Дата);
		ОбъектДокумент.Номер = Документ.Номер;
		ОбъектДокумент.Счет = Счет;
		ОбъектДокумент.ИсточникПоступления = ИсточникПоступления;
		ОбъектДокумент.Сумма = Число(Документ.Сумма);
		ОбъектДокумент.Комментарий = Документ.Комментарий;
		
		ОбъектДокумент.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьДокументы_ГрафикПлатежей(Таблица, МассивКодовДляПропуска)
	Для Каждого Документ Из Таблица Цикл 
		Если МассивКодовДляПропуска.Найти(Документ.Номер) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбъектДокумент = Документы.ГрафикПлатежей.СоздатьДокумент();
		
		ОбъектДокумент.Дата = Дата(Документ.Дата);
		ОбъектДокумент.Номер = Документ.Номер;
		ОбъектДокумент.Договор = ПолучитьСсылку("КредитныйДоговор", Документ.ДоговорНомер, Истина);
		ОбъектДокумент.Контрагент = ПолучитьСсылку("Контрагенты", Документ.КонтрагентКод);
		ОбъектДокумент.ДокументРасход = ПолучитьСсылку("Расходы", Документ.ДокументРасходНомер, Истина);
		
		Для Каждого Строка Из Документ.ГрафикПлатежей Цикл
			НоваяСтрока = ОбъектДокумент.ГрафикПлатежей.Добавить();
			НоваяСтрока.ДатаПлатежа = Дата(Строка.ДатаПлатежа);
			НоваяСтрока.СуммаПлатежа = Строка.СуммаПлатежа;
			НоваяСтрока.ОсновнойДолг = Строка.ОсновнойДолг;
			НоваяСтрока.Проценты = Строка.Проценты;
			НоваяСтрока.Остаток = Строка.Остаток;
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьДокументы_КредитныйДоговор(Таблица, МассивКодовДляПропуска)
	Для Каждого Документ Из Таблица Цикл 
		Если МассивКодовДляПропуска.Найти(Документ.Номер) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбъектДокумент = Документы.КредитныйДоговор.СоздатьДокумент();
		
		ОбъектДокумент.Дата = Дата(Документ.Дата);
		ОбъектДокумент.Номер = Документ.Номер;
		ОбъектДокумент.Контрагент = ПолучитьСсылку("Контрагенты", Документ.КонтрагентКод);
		ОбъектДокумент.Счет = ПолучитьСсылку("Счета", Документ.СчетКод);
		ОбъектДокумент.ВидПлатежа = Документ.ВидПлатежа;
		ОбъектДокумент.ВидВзаиморасчетов = Документ.ВидВзаиморасчетов;
		ОбъектДокумент.ДатаВыдачи = Дата(Документ.ДатаВыдачи);
		ОбъектДокумент.СрокКредита = Документ.СрокКредита;
		ОбъектДокумент.ДатаПлатежа = Дата(Документ.ДатаПлатежа);
		ОбъектДокумент.СуммаОсновногоДолга = Документ.СуммаОсновногоДолга;
		ОбъектДокумент.СуммаСтраховки = Документ.СуммаСтраховки;
		ОбъектДокумент.СовпадаетСДатойВыдачи = Документ.СовпадаетСДатойВыдачи;
		ОбъектДокумент.ПереноситьНаРабочийДень = Документ.ПереноситьНаРабочийДень;
		ОбъектДокумент.Процент = Документ.Процент;
		ОбъектДокумент.Погашен = Документ.Погашен;
		ОбъектДокумент.ЕжемесячныйПлатеж = Документ.ЕжемесячныйПлатеж;
		ОбъектДокумент.НачисленныеПроценты = Документ.НачисленныеПроценты;
		ОбъектДокумент.ПолнаяСтоимостьКредита = Документ.ПолнаяСтоимостьКредита;
		ОбъектДокумент.Переплата = Документ.Переплата;
		ОбъектДокумент.Наименование = Документ.Наименование;
		ОбъектДокумент.АктуальныйГрафик = ПолучитьСсылку("ГрафикПлатежей", Документ.АктуальныйГрафикНомер, Истина);
		ОбъектДокумент.ОбъектИзменени = Документ.ОбъектИзменени;
		ОбъектДокумент.ЗачислитьНаСчет = Документ.ЗачислитьНаСчет;
		ОбъектДокумент.СуммаВнесенныхПлатежей = Документ.СуммаВнесенныхПлатежей;
		
		Для Каждого Строка Из Документ.ГрафикПлатежей Цикл
			НоваяСтрока = ОбъектДокумент.ГрафикПлатежей.Добавить();
			НоваяСтрока.ДатаПлатежа = Дата(Строка.ДатаПлатежа);
			НоваяСтрока.СуммаПлатежа = Строка.СуммаПлатежа;
			НоваяСтрока.ОсновнойДолг = Строка.ОсновнойДолг;
			НоваяСтрока.Проценты = Строка.Проценты;
			НоваяСтрока.Остаток = Строка.Остаток;
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

//Регистры сведений
//Процедура ЗагрузитьРегистры_ЗапланированныеПокупки(Таблица, МассивКодовДляПропуска = Неопределено)
//	Возврат;
//КонецПроцедуры

//Процедура ЗагрузитьРегистры_Цены(Таблица, МассивКодовДляПропуска = Неопределено)
//	Возврат;
//КонецПроцедуры

Процедура ЗагрузитьРегистры_ГрафикПериодическихПлатежей(Таблица, МассивКодовДляПропуска = Неопределено)
	Возврат;
КонецПроцедуры

Процедура ЗагрузитьРегистры_ХранениеДанных(Таблица, МассивКодовДляПропуска = Неопределено)
	Возврат;
КонецПроцедуры

Процедура ЗагрузитьРегистры_УчетныеЗаписи(Таблица, МассивКодовДляПропуска = Неопределено)
	Возврат;
КонецПроцедуры

//Процедура ЗагрузитьРегистры_ГрафикПлатежей(Таблица, МассивКодовДляПропуска = Неопределено)
//	Возврат; //грузить не нужно, записи создадутся при проведении документов
//КонецПроцедуры

Процедура ЗагрузитьРегистры_СоответствияНаименований(Таблица, МассивКодовДляПропуска = Неопределено)
	Если Таблица.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Попытка
				
		Для Каждого Строка Из Таблица Цикл 
			МенеджерЗаписи = РегистрыСведений.СоответствияНаименований.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Магазин = ПолучитьСсылку("Магазины", Строка.МагазинКод);
			МенеджерЗаписи.СтатьяРасхода = ПолучитьСсылку("СтатьиРасходов", Строка.СтатьяРасходаКод);
			МенеджерЗаписи.НаименованиеМагазинаВЧеке = Строка.НаименованиеМагазинаВЧеке;
			МенеджерЗаписи.НаименованиеТовараВЧеке = Строка.НаименованиеТовараВЧеке;
			МенеджерЗаписи.Записать(Ложь);
		КонецЦикла;
		
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщиеПроцедурыИФункцииСервер.ЗаписатьЛоги(Ошибка);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗагрузитьРегистры_ШтрихкодыСтатейРасходов(Таблица, МассивКодовДляПропуска = Неопределено)
	Если Таблица.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Штрихкоды.Штрихкод КАК Штрихкод
	               |ПОМЕСТИТЬ РегистрШтрихкоды
	               |ИЗ
	               |	РегистрСведений.ШтрихкодыСтатейРасходов КАК Штрихкоды
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВнешнийИсточник.Штрихкод КАК Штрихкод,
	               |	ВнешнийИсточник.СтатьяРасходаКод КАК СтатьяРасходаКод
	               |ПОМЕСТИТЬ ТаблицаВнешнийИсточник
	               |ИЗ
	               |	&ВнешнийИсточник КАК ВнешнийИсточник
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаВнешнийИсточник.Штрихкод КАК Штрихкод,
	               |	СтатьиРасходов.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ ТаблицаЗначенийШтрихкоды
	               |ИЗ
	               |	ТаблицаВнешнийИсточник КАК ТаблицаВнешнийИсточник
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтатьиРасходов КАК СтатьиРасходов
	               |		ПО ТаблицаВнешнийИсточник.СтатьяРасходаКод = СтатьиРасходов.Код
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаЗначенийШтрихкоды.Штрихкод КАК Штрихкод,
	               |	ТаблицаЗначенийШтрихкоды.Ссылка КАК Ссылка
	               |ИЗ
	               |	ТаблицаЗначенийШтрихкоды КАК ТаблицаЗначенийШтрихкоды
	               |ГДЕ
	               |	НЕ ТаблицаЗначенийШтрихкоды.Штрихкод В
	               |				(ВЫБРАТЬ
	               |					РегистрШтрихкоды.Штрихкод КАК Штрихкод
	               |				ИЗ
	               |					РегистрШтрихкоды КАК РегистрШтрихкоды)";
	Запрос.УстановитьПараметр("ВнешнийИсточник", Таблица);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ШтрихкодыСтатейРасходов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Штрихкод = ВыборкаДетальныеЗаписи.Штрихкод;
		МенеджерЗаписи.СтатьяРасхода = ВыборкаДетальныеЗаписи.Ссылка;//Справочники.СтатьиРасходов.НайтиПоКоду(ВыборкаДетальныеЗаписи.СтатьяРасходаКод);
		Попытка
			МенеджерЗаписи.Записать(Ложь);
		Исключение
			Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщиеПроцедурыИФункцииСервер.ЗаписатьЛоги(Ошибка);
			Продолжить;
		КонецПопытки;		
	КонецЦикла;
			
КонецПроцедуры

Процедура ЗагрузитьРегистры_СтатистикаИспользованияСервисов(Таблица, МассивКодовДляПропуска = Неопределено)
	Если Таблица.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СтатистикаИспользованияСервисов.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(Таблица);
	НаборЗаписей.Записать();	
КонецПроцедуры

Процедура ЗагрузитьРегистры_ЛогиОшибок(Таблица, МассивКодовДляПропуска = Неопределено)
	Если Таблица.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ЛогиОшибок.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(Таблица);
	НаборЗаписей.Записать(Ложь);	
КонецПроцедуры

