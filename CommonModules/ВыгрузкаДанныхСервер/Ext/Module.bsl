
Функция ВыгрузитьДанныеСервер(Путь_тмп) Экспорт
	ПеречислениеОблачныйBackUp = ПредопределенноеЗначение("Перечисление.ВидыСтатистики.ОблачныйBackUp");
	РаботаСоСтатистикой_Сервер.ЗаписатьФактИспользованияСервиса(ПеречислениеОблачныйBackUp, Ложь);
	УчетнаяЗапись = ОбщиеПроцедурыИФункцииСервер.ПолучитьУчетнуюЗапись();
	
	Ответ = ПодготовитьФайлБэкапа(Путь_тмп, УчетнаяЗапись, Ложь);

	Если Ответ.ФайлСоздан Тогда
		Возврат ЗапросыHTTP_Сервер.ОтпарвитьДанныеНаСервер(Ответ.АдресВХ, УчетнаяЗапись);
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПодготовитьФайлБэкапа(Путь, УчетнаяЗапись, ВФайл = Ложь) Экспорт
	Возврат ЗаписатьДанныеВФайл(Путь, УчетнаяЗапись, ВФайл);
КонецФункции

Функция ЗаписатьДанныеВФайл(Путь, УчетнаяЗапись, ВФайл) Экспорт
		
	СтруктураВозврата = Новый Структура("ФайлСоздан, АдресВХ, Ошибка", Ложь, "");
	ПутьXML = ПолучитьИмяВременногоФайла("xml");
	Попытка
		хml = Новый ЗаписьXML;
		хml.ОткрытьФайл(ПутьXML, "UTF-8");
		хml.ЗаписатьОбъявлениеXML();
		
		хml.ЗаписатьНачалоЭлемента("dataBase");
		
		хml.ЗаписатьНачалоЭлемента("dateFirstUpLoad");
		хml.ЗаписатьТекст(Строка(ТекущаяДата()));
		хml.ЗаписатьКонецЭлемента(); //</dateFirstUpLoad>
		
		хml.ЗаписатьНачалоЭлемента("dateUpdate");
		хml.ЗаписатьТекст(Строка(ТекущаяДата()));
		хml.ЗаписатьКонецЭлемента(); //</dateUpdate>
		
		хml.ЗаписатьНачалоЭлемента("version");
		хml.ЗаписатьТекст(Метаданные.Версия);
		хml.ЗаписатьКонецЭлемента(); //</version>
		
		хml.ЗаписатьНачалоЭлемента("user_id");
		хml.ЗаписатьТекст(УчетнаяЗапись.id_user);
		хml.ЗаписатьКонецЭлемента(); //</user_id>
		
		хml.ЗаписатьНачалоЭлемента("password");
		хml.ЗаписатьТекст(УчетнаяЗапись.Пароль);
		хml.ЗаписатьКонецЭлемента(); //</password>

		ВыгрузкаПоСхемеЦепочка_XML(хml);
		
		хml.ЗаписатьКонецЭлемента(); //</dataBase>
		хml.Закрыть();
		
		АдресВХ = РаботаСФайлами_Сервер.УпаковатьФайлВАрхив(ПутьXML, УчетнаяЗапись.Пароль, НЕ ВФайл);
		
		СтруктураВозврата.АдресВХ = АдресВХ; 		
		СтруктураВозврата.ФайлСоздан = Истина;
		
	Исключение
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЛогированиеОшибокСервер.ЗаписатьОшибкуВЛоги(Ошибка);
		
		СтруктураВозврата.ФайлСоздан = Ложь;
		СтруктураВозврата.Ошибка = Ошибка;
		
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(ПутьXML);
	Исключение
		ТексОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Текст = "Не удалось удалить временный файл после формирования данных." + Символы.ПС + ТексОшибки;
		ЛогированиеОшибокСервер.ЗаписатьОшибкуВЛоги(Текст);
	КонецПопытки;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ВыгрузкаПоСхемеЦепочка_XML(Запись) Экспорт
	
	Узел = ПланыОбмена.Бэкап.НайтиПоКоду("DataCentre"); //TODO: нужно это создать программно при первом запуске!!!
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	//ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	//Запись = Новый ЗаписьXML;
	//Запись.УстановитьСтроку();
	
	Попытка
		ЗаписьСообщения.НачатьЗапись(Запись, Узел);
	Исключение
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЛогированиеОшибокСервер.ЗаписатьОшибкуВЛоги(Ошибка);
	КонецПопытки;
	
	Выборка = ПланыОбмена.ВыбратьИзменения(Узел, ЗаписьСообщения.НомерСообщения);
	
	//СоставОбмена = Метаданные.ПланыОбмена.Бэкап.Состав;
	//МассивТипов = Новый Массив;
	//Для Каждого ЭлементСостава Из СоставОбмена Цикл
	//	Если СтрНайти(ЭлементСостава.Метаданные.ПолноеИмя(), "Справочник") ИЛИ СтрНайти(ЭлементСостава.Метаданные.ПолноеИмя(), "Документ") Тогда
	//		ТипДанных = Тип(СтрЗаменить(ЭлементСостава.Метаданные.ПолноеИмя(), ".", "Ссылка."));
	//		МассивТипов.Добавить(ТипДанных);
	//	ИначеЕсли СтрНайти(ЭлементСостава.Метаданные.ПолноеИмя(), "РегистрСведений") Тогда     
	//		ТипДанных = Тип(СтрЗаменить(ЭлементСостава.Метаданные.ПолноеИмя(), ".", "НаборЗаписей.")); //TODO: выяснить про тип *Запись
	//		МассивТипов.Добавить(ТипДанных);
	//	КонецЕсли;
	//КонецЦикла;
	
	
	//ТЗ_Данные = Новый ТаблицаЗначений;
	//ТЗ_Данные.Колонки.Добавить("ОбъектСсылка", Новый ОписаниеТипов(МассивТипов));
	//ТЗ_Данные.Колонки.Добавить("ТипДанных", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	//ТЗ_Данные.Колонки.Добавить("ТипДанныхОбъекта", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	
	МассивНаборовЗаписей = Новый Массив;
	МассивДокументов = Новый Массив;
	МассивСправочников = Новый Массив;
	МассивКонстант = Новый Массив;
	//TODO: добавить выгрузку Параметров
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Получить();
		
		Попытка
			ИмяОбъектаМетаданные = Объект.Метаданные().ПолноеИмя();
			
			Если СтрНайти(ИмяОбъектаМетаданные, "Документ") Тогда
				
				МассивДокументов.Добавить(Объект);
			ИначеЕсли СтрНайти(ИмяОбъектаМетаданные, "Справочник") Тогда
				
				МассивСправочников.Добавить(Объект);
				
			ИначеЕсли СтрНайти(ИмяОбъектаМетаданные, "РегистрСведений") Тогда
				//TODO: Исключить зависимые регистры?
				МассивНаборовЗаписей.Добавить(Объект);
				
			ИначеЕсли СтрНайти(ИмяОбъектаМетаданные, "Констант") Тогда
				
				//TODO: МассивКонстант.Добавить(Объект);
				
			КонецЕсли;
			
		Исключение
			Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЛогированиеОшибокСервер.ЗаписатьОшибкуВЛоги(Ошибка + " Ошибка получения данных по объекту по плану обмена для выгрузки бэкапа. Объект: " + ИмяОбъектаМетаданные);
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
	//Справочники
	Если МассивСправочников.Количество() > 0 Тогда
		Запись.ЗаписатьНачалоЭлемента("handbooks");
		Для Каждого Объект Из МассивСправочников Цикл
			ЗаписатьXML(Запись, Объект, НазначениеТипаXML.Явное);
		КонецЦикла;
		Запись.ЗаписатьКонецЭлемента(); //handbooks
	КонецЕсли;
	
	//Документы
	Если МассивДокументов.Количество() > 0 Тогда
		Запись.ЗаписатьНачалоЭлемента("documents");
		Для Каждого Объект Из МассивДокументов Цикл
			ЗаписатьXML(Запись, Объект, НазначениеТипаXML.Явное);
		КонецЦикла;
		Запись.ЗаписатьКонецЭлемента(); //documents
	КонецЕсли;
	
	//РегистрСведений
	Если МассивНаборовЗаписей.Количество() > 0 Тогда
		Запись.ЗаписатьНачалоЭлемента("infoReg");
		Для Каждого Объект Из МассивНаборовЗаписей Цикл
			ЗаписатьXML(Запись, Объект, НазначениеТипаXML.Явное);
		КонецЦикла;
		Запись.ЗаписатьКонецЭлемента(); //infoReg
	КонецЕсли;
	
	//Константы
	Если МассивКонстант.Количество() > 0 Тогда
		Запись.ЗаписатьНачалоЭлемента("constants");
		Для Каждого Объект Из МассивКонстант Цикл
			ЗаписатьXML(Запись, Объект, НазначениеТипаXML.Явное);
		КонецЦикла;
		Запись.ЗаписатьКонецЭлемента(); //constants
	КонецЕсли;

	а  = 1;
	Попытка
		ЗаписьСообщения.ЗакончитьЗапись();
		//Запись.Закрыть();
	Исключение
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЛогированиеОшибокСервер.ЗаписатьОшибкуВЛоги(Ошибка);
	КонецПопытки;
	
	
	
	//TODO: если отправка Успешно - очистить изменения
	
	////Константы
	//ЗаписьXML.ЗаписатьНачалоЭлемента("constants");
	//Для Каждого Объект Из ОбъектыКонстанты Цикл
	//	ЗаписьXML.ЗаписатьНачалоЭлемента(Объект.Имя);
	//	ЗаписатьОбъектыВФайл(ЗаписьXML, Объект.Имя, Истина);
	//	ЗаписьXML.ЗаписатьКонецЭлемента();
	//КонецЦикла;
	//ЗаписьXML.ЗаписатьКонецЭлемента(); //constants
				
КонецПроцедуры

Процедура ВыгрузитьСтатистикуНаСервер() Экспорт
	ЗапросыHTTP_Сервер.ОтправитьСтатистикуВДатаЦентр();
КонецПроцедуры

//Процедура АвтобэкапФонСервер(Каталог, УчетныеЗаписи, Облако) Экспорт
//	МассивПараметров = Новый Массив;
//	МассивПараметров.Добавить(Облако);
//	МассивПараметров.Добавить(Каталог);
//	МассивПараметров.Добавить(УчетныеЗаписи.Логин);     
//	МассивПараметров.Добавить(УчетныеЗаписи.Пароль); 
//	
//	//Автобэкап(Истина, Каталог, УчетныеЗаписи.Логин, УчетныеЗаписи.Пароль);//Времянка для тестов
//	
//	/////////////////////
//	//Определяем, если ли изменения по плану обмена
//	Узел = ПланыОбмена.Бэкап.НайтиПоКоду("DataCentre");
//	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
//	Запись = Новый ЗаписьXML;
//	Запись.УстановитьСтроку();
//	Попытка
//		ЗаписьСообщения.НачатьЗапись(Запись, Узел);
//	Исключение
//		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//		ЛогированиеОшибокСервер.ЗаписатьОшибкуВЛоги(Ошибка);
//		Возврат;
//	КонецПопытки;
//	Выборка = ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения);
//	
//	Если Выборка.Следующий() Тогда
//		Константы.АдресХЗ_Ответа.Установить(ПоместитьВоВременноеХранилище(Неопределено));
//		ФонЗадание = ФоновыеЗадания.Выполнить("ВыгрузкаДанныхСервер.Автобэкап", МассивПараметров,, "Создаю резервную копию...");
//		Константы.ФонУИД_Автобэкап.Установить(ФонЗадание.УникальныйИдентификатор);
//	КонецЕсли;
//	//
//	/////////////////////////////////////
//
//КонецПроцедуры
//
//Функция Автобэкап(ВыгрузкаНаСервер, Каталог, Логин = Неопределено, Пароль = Неопределено) Экспорт
//	ПеречислениеАвтобэкап = ПредопределенноеЗначение("Перечисление.ВидыСтатистики.Автобэкап");
//	ТелоСтрокиСтатистика = СборСтатистикиСервер.ПолучитьТелоСтрокиСтатистики(ПеречислениеАвтобэкап);
//	РаботаСоСтатистикой_Сервер.ЗаписатьФактИспользованияСервиса(ПеречислениеАвтобэкап, Ложь);
//	
//	Результат = Новый Структура("Успешно, ТекстОшибки, СообщениюПользователю", Ложь, "", "");
//	Ответ = Ложь;
//	
//	Ответ = ВыгрузкаПоСхемеЦепочка_XML(Каталог, Ложь);
//	
//	Если Ответ.ВыгрузкаУспешно Тогда
//		УчетныеЗаписи = ОбщиеПроцедурыИФункцииСервер.ПолучитьУчетнуюЗапись();
//		Если ЗначениеЗаполнено(УчетныеЗаписи) И ВыгрузкаНаСервер Тогда
//			Путь = КаталогВременныхФайлов() + "\backUp_1CDB.txt";
//			Если ЗапросыHTTP_Сервер.ОтпарвитьДанныеНаСервер(Путь, УчетныеЗаписи.Логин, УчетныеЗаписи.Пароль,,, ТелоСтрокиСтатистика) Тогда
//				Результат.Успешно = Истина;
//				Результат.СообщениюПользователю = "Выполнен успешно";
//			Иначе
//				Результат.Успешно = Ложь;
//				Результат.СообщениюПользователю = "Не удалось отправить данные на сервер";
//			КонецЕсли;
//		Иначе
//			Результат.Успешно = Истина;
//		КонецЕсли;
//		КопироватьФайл(КаталогВременныхФайлов() + "backUp_1CDB.txt", Каталог + "backUp_1CDB.txt");
//	Иначе
//		Результат.СообщениюПользователю = "Не удалось отправить данные на сервер";
//	КонецЕсли;
//	
//	ПоместитьВоВременноеХранилище(Результат, Константы.АдресХЗ_Ответа.Получить()); 
//	
//	Возврат Результат;
//КонецФункции

#Область ВыгрзукаЛогов
      

Функция ВыгрузкаЛогов() Экспорт
	
	ПеречислениеЛоги = ПредопределенноеЗначение("Перечисление.ВидыСтатистики.ОтправкаЛогов");
	ТелоСтрокиСтатистика = СборСтатистикиСервер.ПолучитьТелоСтрокиСтатистики(ПеречислениеЛоги);
	РаботаСоСтатистикой_Сервер.ЗаписатьФактИспользованияСервиса(ПеречислениеЛоги, Ложь);
	
	Результат = Новый Структура("Успешно, ТекстОшибки, СообщениюПользователю", Ложь, "", "");
	
	Ответ = ЗапросыHTTP_Сервер.ОтправитьЛогиВДатаЦентр();
	
	ОтветЛоги = ЗапросыHTTP_Сервер.ОтправитьСтатистикуВДатаЦентр();
	
	Если Ответ.ОтправленоУдачно Тогда
		Результат.Успешно = Истина;
		Результат.СообщениюПользователю = "Выполнен успешно";
	Иначе
		Результат.Успешно = Ложь;
		Результат.СообщениюПользователю = "Не удалось отправить данные на сервер";
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, Константы.АдресХЗ_ОтветаЛоги.Получить());
КонецФункции

Процедура ОтправитьЛогиФонСервер() Экспорт
	
	Константы.АдресХЗ_ОтветаЛоги.Установить(ПоместитьВоВременноеХранилище(Неопределено));
	ФонЗадание = ФоновыеЗадания.Выполнить("ВыгрузкаДанныхСервер.ВыгрузкаЛогов",,, "Отправляю логи на сервер...");
	Константы.ФонУИД_ОтправкаЛогов.Установить(ФонЗадание.УникальныйИдентификатор);

КонецПроцедуры
#КонецОбласти

Функция ПреобразоватьДанныеСтрокаВХранилище(Знач ДанныеСтрока) Экспорт
	Возврат Новый ХранилищеЗначения(ДанныеСтрока, Новый СжатиеДанных(9));
КонецФункции

Функция ПолучитьXMLСтроку(Данные) Экспорт
	Возврат XMLСтрока(Данные);
КонецФункции
