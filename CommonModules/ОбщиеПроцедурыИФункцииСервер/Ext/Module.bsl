
#Область ПрограммныйИнтерфейс
Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт
	Возврат Константы[ИмяКонстанты].Получить();
КонецФункции

Функция ХешироватьпарольФункции(Пароль) Экспорт
	Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеширование.Добавить("екарныйбабай" + Пароль);
	Возврат НРег(СтрЗаменить(Хеширование.ХешСумма, " ", ""));
КонецФункции

Функция ПолучитьСтруктуруИзСтрокиJSON(ТекстJSON) Экспорт
	Возврат ПрочитатьСтроку(ТекстJSON);
КонецФункции

// Зарегестрировать учетную запись в системе.
// 
// Параметры:
//  Логин - Строка
//  Пароль - Строка
//  ID_User - Строка
// 
Процедура ЗарегестрироватьУчетнуюЗаписьВСистеме(Логин, Пароль, ID_User) Экспорт
	УспешнаяРегистрация = РегистрыСведений.УчетныеЗаписи.ЗаписатьНовуюУчетнуюЗапись(Логин, ID_User, Пароль);
	Если НЕ УспешнаяРегистрация Тогда
		ПопыткаРегистрации = 1;
		Пока НЕ УспешнаяРегистрация И ПопыткаРегистрации <= 5 Цикл
			ПопыткаРегистрации = ПопыткаРегистрации + 1;
			Пока ТранзакцияАктивна() Цикл
				ОтменитьТранзакцию();
			КонецЦикла;
			УспешнаяРегистрация = РегистрыСведений.УчетныеЗаписи.ЗаписатьНовуюУчетнуюЗапись(Логин, ID_User, Пароль);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ УспешнаяРегистрация Тогда
		ДиалогиСПользователямиСервер.ПоказатьСообщениеПользователю("Не удалось выполнить регистрацию пользователя... Повторите попытку позже.");
		ТекстЛога = "Выполнено 5 не удачных попыток регистрации пользователя в приложении!";
		ЛогированиеОшибокСервер.ЗаписатьОшибкуВЛоги(ТекстЛога,,, Перечисления.КритерииОшибок.Критическая);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПрочитатьСтроку(ТекстJSON)
	ИмяФайла = ПолучитьИмяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста();
	ЗаписьТекста.Открыть(ИмяФайла);
	ЗаписьТекста.Записать(ТекстJSON);
	ЗаписьТекста.Закрыть();
	СтруктураОтвета = СформироватьСтруктуруИзJSON(ИмяФайла);
	УдалитьФайлы(ИмяФайла);
	Возврат  СтруктураОтвета;
КонецФункции

Функция СформироватьСтруктуруИзJSON(ИмяФайла)
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.ОткрытьФайл(ИмяФайла, "UTF-8");
	СтруктураОтвета = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
	Возврат СтруктураОтвета;
КонецФункции
#КонецОбласти

#Область Справочники      

Функция ПроверитьНаличиеДубляНаименования(ИмяЭлемента, ИмяОбъекта, СпрСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Объект.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Магазины КАК Объект
	               |ГДЕ
	               |	Объект.Наименование = &Наименование
	               |	И Объект.Ссылка <> &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Магазины КАК Объект", "Справочник." + ИмяОбъекта + " КАК Объект");
	Если ЗначениеЗаполнено(СпрСсылка)  Тогда
		Запрос.УстановитьПараметр("Ссылка", СпрСсылка);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Объект.Ссылка <> &Ссылка", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Наименование", СокрЛП(ИмяЭлемента));	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();
КонецФункции

#КонецОбласти

#Область НастройкиСистемы
Процедура УстановитьНастройки(Параметр, ЗначениеПараметра) Экспорт
	Справочники.ПараметрыСистемы.УстановитьНовоеЗначениеПараметраСистемы(Параметр, ЗначениеПараметра);
КонецПроцедуры

Функция ПолучитьНастройки(МассивПараметров) Экспорт
	 Возврат Справочники.ПараметрыСистемы.ПолучитьЗначенияПараметров(МассивПараметров)
 КонецФункции
 
 Функция ПолучитьУчетнуюЗапись() Экспорт
	Возврат РегистрыСведений.УчетныеЗаписи.ПолучитьУчетнуюЗапись();
КонецФункции
 #КонецОбласти
 
 #Область ФоновыеЗадания
 Функция ЗаданиеВыполнено(ПроверяемоеСобытие) Экспорт
	
	Результат = Новый Структура("НетДанных, Выполнено, ТекстСообщения", Истина, Ложь, "");
	
	Если ПроверяемоеСобытие = Перечисления.ПроверяемыеСобытияОбработчикаОжидания.Автобэкап Тогда
		УИД = Новый УникальныйИдентификатор(Константы.ФонУИД_Автобэкап.Получить());
	ИначеЕсли ПроверяемоеСобытие = Перечисления.ПроверяемыеСобытияОбработчикаОжидания.ОтправкаЛогов Тогда
		УИД = Новый УникальныйИдентификатор(Константы.ФонУИД_ОтправкаЛогов.Получить());
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УИД) Тогда
		Результат.Выполнено = Истина;
		Результат.ТекстСообщения = "Не удалось выполнить!";
		Возврат Результат;
	КонецЕсли;
	
	//Находим фоновое задание по идентификатору 
	ФонЗад = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(УИД);
	
	//Проверяем статус
	Если ФонЗад <> Неопределено Тогда
		Результат.НетДанных = Ложь;
		Если ФонЗад.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			Результат.Выполнено = Истина;
			Результат.ТекстСообщения = "Выполнен успешно";
		ИначеЕсли ФонЗад.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			Результат.Выполнено = Истина;
			Результат.ТекстСообщения = "Не удалось выполнить!";
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ФонЗад.ИнформацияОбОшибке);
			РегистрыСведений.ЛогиОшибок.ЗаписатьОшибкуВЛоги(ТекстОшибки);
		ИначеЕсли ФонЗад.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			Результат.Выполнено = Истина;
			Результат.ТекстСообщения = "Не удалось выполнить!";
			
			
			Если ПроверяемоеСобытие = Перечисления.ПроверяемыеСобытияОбработчикаОжидания.Автобэкап Тогда
				ИмяФона = "Автобэкап";
			ИначеЕсли ПроверяемоеСобытие = Перечисления.ПроверяемыеСобытияОбработчикаОжидания.ОтправкаЛогов Тогда
				ИмяФона = "Отправка логов";
			ИначеЕсли ПроверяемоеСобытие = Перечисления.ПроверяемыеСобытияОбработчикаОжидания.ОтправкаСтатистики Тогда 
				ИмяФона = "Отправка статистики";
			КонецЕсли;
			
			РегистрыСведений.ЛогиОшибок.ЗаписатьОшибкуВЛоги("Отмена фонового задания: " + ИмяФона); 
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции                       
#КонецОбласти

